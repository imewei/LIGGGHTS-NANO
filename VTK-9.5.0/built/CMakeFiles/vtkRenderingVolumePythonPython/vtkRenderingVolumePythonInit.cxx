// Generated by vtkWrapPythonInit (see Wrapping/Tools/vtkWrapPythonInit.c)

#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>

// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

// Export the module initialization function
extern "C" { VTK_ABI_EXPORT PyObject *PyInit_vtkRenderingVolume(); }

// Each PyVTKAddFile_<name>() is implemented in <name>Python.cxx,
// where <name>Python.cxx is generated by running the vtkWrapPython
// executable on the <name>.h header file.
extern "C" { void PyVTKAddFile_vtkBlockSortHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkDirectionEncoder(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkEncodedGradientEstimator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkEncodedGradientShader(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFiniteDifferenceGradientEstimator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointRayCastImage(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeGOHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeGOShadeHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeShadeHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointVolumeRayCastHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointVolumeRayCastMapper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFixedPointVolumeRayCastMIPHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkGPUVolumeRayCastMapper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMultiVolume(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkOSPRayVolumeInterface(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkAnariVolumeInterface(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkProjectedTetrahedraMapper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkRayCastImageDisplayHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkRecursiveSphereDirectionEncoder(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkSphericalDirectionEncoder(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridBunykRayCastFunction(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridHomogeneousRayIntegrator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridLinearRayIntegrator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridPartialPreIntegration(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridPreIntegration(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridVolumeMapper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridVolumeRayCastFunction(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridVolumeRayCastIterator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridVolumeRayCastMapper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridVolumeRayIntegrator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUnstructuredGridVolumeZSweepMapper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkVolumeMapper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkVolumeOutlineSource(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkVolumePicker(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkVolumeRayCastSpaceLeapingImageFilter(PyObject *dict); }

static PyMethodDef PyvtkRenderingVolume_Methods[] = {
  { nullptr, nullptr, 0, nullptr }
};

static PyModuleDef PyvtkRenderingVolume_Module = {
  PyModuleDef_HEAD_INIT,
  "vtkRenderingVolume", // m_name
  nullptr, // m_doc
  0, // m_size
  PyvtkRenderingVolume_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};

PyObject *PyInit_vtkRenderingVolume()
{
  PyObject *m = PyModule_Create(&PyvtkRenderingVolume_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module vtkRenderingVolume");
  }

  const char *depends[3] = {
    "vtkmodules.vtkCommonCore",
    "vtkmodules.vtkCommonExecutionModel",
    "vtkmodules.vtkRenderingCore",
  };

  for (int i = 0; i < 3; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      Py_DECREF(m);
      return PyErr_Format(PyExc_ImportError,
        "Failed to load vtkRenderingVolume: No module named %s",
        depends[i]);
    }
  }

  if (!vtkPythonUtil::IsInitialized())
  {
    Py_DECREF(m);
    return PyErr_Format(PyExc_ImportError,
      "Initialization failed for vtkRenderingVolume, not compatible with %s",
      depends[0]);
  }

  PyVTKAddFile_vtkBlockSortHelper(d);
  PyVTKAddFile_vtkDirectionEncoder(d);
  PyVTKAddFile_vtkEncodedGradientEstimator(d);
  PyVTKAddFile_vtkEncodedGradientShader(d);
  PyVTKAddFile_vtkFiniteDifferenceGradientEstimator(d);
  PyVTKAddFile_vtkFixedPointRayCastImage(d);
  PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeGOHelper(d);
  PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeGOShadeHelper(d);
  PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeHelper(d);
  PyVTKAddFile_vtkFixedPointVolumeRayCastCompositeShadeHelper(d);
  PyVTKAddFile_vtkFixedPointVolumeRayCastHelper(d);
  PyVTKAddFile_vtkFixedPointVolumeRayCastMapper(d);
  PyVTKAddFile_vtkFixedPointVolumeRayCastMIPHelper(d);
  PyVTKAddFile_vtkGPUVolumeRayCastMapper(d);
  PyVTKAddFile_vtkMultiVolume(d);
  PyVTKAddFile_vtkOSPRayVolumeInterface(d);
  PyVTKAddFile_vtkAnariVolumeInterface(d);
  PyVTKAddFile_vtkProjectedTetrahedraMapper(d);
  PyVTKAddFile_vtkRayCastImageDisplayHelper(d);
  PyVTKAddFile_vtkRecursiveSphereDirectionEncoder(d);
  PyVTKAddFile_vtkSphericalDirectionEncoder(d);
  PyVTKAddFile_vtkUnstructuredGridBunykRayCastFunction(d);
  PyVTKAddFile_vtkUnstructuredGridHomogeneousRayIntegrator(d);
  PyVTKAddFile_vtkUnstructuredGridLinearRayIntegrator(d);
  PyVTKAddFile_vtkUnstructuredGridPartialPreIntegration(d);
  PyVTKAddFile_vtkUnstructuredGridPreIntegration(d);
  PyVTKAddFile_vtkUnstructuredGridVolumeMapper(d);
  PyVTKAddFile_vtkUnstructuredGridVolumeRayCastFunction(d);
  PyVTKAddFile_vtkUnstructuredGridVolumeRayCastIterator(d);
  PyVTKAddFile_vtkUnstructuredGridVolumeRayCastMapper(d);
  PyVTKAddFile_vtkUnstructuredGridVolumeRayIntegrator(d);
  PyVTKAddFile_vtkUnstructuredGridVolumeZSweepMapper(d);
  PyVTKAddFile_vtkVolumeMapper(d);
  PyVTKAddFile_vtkVolumeOutlineSource(d);
  PyVTKAddFile_vtkVolumePicker(d);
  PyVTKAddFile_vtkVolumeRayCastSpaceLeapingImageFilter(d);

  vtkPythonUtil::AddModule("vtkRenderingVolume");

  return m;
}
