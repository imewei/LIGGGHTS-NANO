// Generated by vtkWrapPythonInit (see Wrapping/Tools/vtkWrapPythonInit.c)

#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>

// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

// Export the module initialization function
extern "C" { VTK_ABI_EXPORT PyObject *PyInit_vtkFiltersExtraction(); }

// Each PyVTKAddFile_<name>() is implemented in <name>Python.cxx,
// where <name>Python.cxx is generated by running the vtkWrapPython
// executable on the <name>.h header file.
extern "C" { void PyVTKAddFile_vtkBlockSelector(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkConvertSelection(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExpandMarkedElements(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractBlock(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractBlockUsingDataAssembly(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractCellsByType(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractDataArraysOverTime(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractDataOverTime(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractDataSets(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractExodusGlobalTemporalVariables(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractGeometry(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractGrid(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractLevel(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractParticlesOverTime(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractPolyDataGeometry(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractRectilinearGrid(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractSelectedArraysOverTime(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractSelectedRows(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractSelection(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractTensorComponents(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractTimeSteps(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractUnstructuredGrid(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkExtractVectorComponents(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFrustumSelector(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkHierarchicalDataExtractDataSets(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkHierarchicalDataExtractLevel(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLocationSelector(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkProbeSelectedLocations(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkSelector(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkValueSelector(PyObject *dict); }

static PyMethodDef PyvtkFiltersExtraction_Methods[] = {
  { nullptr, nullptr, 0, nullptr }
};

static PyModuleDef PyvtkFiltersExtraction_Module = {
  PyModuleDef_HEAD_INIT,
  "vtkFiltersExtraction", // m_name
  nullptr, // m_doc
  0, // m_size
  PyvtkFiltersExtraction_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};

PyObject *PyInit_vtkFiltersExtraction()
{
  PyObject *m = PyModule_Create(&PyvtkFiltersExtraction_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module vtkFiltersExtraction");
  }

  const char *depends[3] = {
    "vtkmodules.vtkCommonCore",
    "vtkmodules.vtkCommonExecutionModel",
    "vtkmodules.vtkFiltersGeneral",
  };

  for (int i = 0; i < 3; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      Py_DECREF(m);
      return PyErr_Format(PyExc_ImportError,
        "Failed to load vtkFiltersExtraction: No module named %s",
        depends[i]);
    }
  }

  if (!vtkPythonUtil::IsInitialized())
  {
    Py_DECREF(m);
    return PyErr_Format(PyExc_ImportError,
      "Initialization failed for vtkFiltersExtraction, not compatible with %s",
      depends[0]);
  }

  PyVTKAddFile_vtkBlockSelector(d);
  PyVTKAddFile_vtkConvertSelection(d);
  PyVTKAddFile_vtkExpandMarkedElements(d);
  PyVTKAddFile_vtkExtractBlock(d);
  PyVTKAddFile_vtkExtractBlockUsingDataAssembly(d);
  PyVTKAddFile_vtkExtractCellsByType(d);
  PyVTKAddFile_vtkExtractDataArraysOverTime(d);
  PyVTKAddFile_vtkExtractDataOverTime(d);
  PyVTKAddFile_vtkExtractDataSets(d);
  PyVTKAddFile_vtkExtractExodusGlobalTemporalVariables(d);
  PyVTKAddFile_vtkExtractGeometry(d);
  PyVTKAddFile_vtkExtractGrid(d);
  PyVTKAddFile_vtkExtractLevel(d);
  PyVTKAddFile_vtkExtractParticlesOverTime(d);
  PyVTKAddFile_vtkExtractPolyDataGeometry(d);
  PyVTKAddFile_vtkExtractRectilinearGrid(d);
  PyVTKAddFile_vtkExtractSelectedArraysOverTime(d);
  PyVTKAddFile_vtkExtractSelectedRows(d);
  PyVTKAddFile_vtkExtractSelection(d);
  PyVTKAddFile_vtkExtractTensorComponents(d);
  PyVTKAddFile_vtkExtractTimeSteps(d);
  PyVTKAddFile_vtkExtractUnstructuredGrid(d);
  PyVTKAddFile_vtkExtractVectorComponents(d);
  PyVTKAddFile_vtkFrustumSelector(d);
  PyVTKAddFile_vtkHierarchicalDataExtractDataSets(d);
  PyVTKAddFile_vtkHierarchicalDataExtractLevel(d);
  PyVTKAddFile_vtkLocationSelector(d);
  PyVTKAddFile_vtkProbeSelectedLocations(d);
  PyVTKAddFile_vtkSelector(d);
  PyVTKAddFile_vtkValueSelector(d);

  vtkPythonUtil::AddModule("vtkFiltersExtraction");

  return m;
}
