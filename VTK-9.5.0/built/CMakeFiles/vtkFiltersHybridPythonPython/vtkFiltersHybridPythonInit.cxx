// Generated by vtkWrapPythonInit (see Wrapping/Tools/vtkWrapPythonInit.c)

#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>

// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

// Export the module initialization function
extern "C" { VTK_ABI_EXPORT PyObject *PyInit_vtkFiltersHybrid(); }

// Each PyVTKAddFile_<name>() is implemented in <name>Python.cxx,
// where <name>Python.cxx is generated by running the vtkWrapPython
// executable on the <name>.h header file.
extern "C" { void PyVTKAddFile_vtkAdaptiveDataSetSurfaceFilter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkBSplineTransform(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkDepthSortPolyData(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkDSPFilterDefinition(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkDSPFilterGroup(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkEarthSource(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFacetReader(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkForceTime(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkGenerateTimeSteps(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkGreedyTerrainDecimation(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkGridTransform(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkImageToPolyDataFilter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkImplicitModeller(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkPCAAnalysisFilter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkPolyDataSilhouette(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkProcrustesAlignmentFilter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkProjectedTerrainPath(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkRenderLargeImage(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTemporalArrayOperatorFilter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTemporalDataSetCache(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTemporalFractal(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTemporalInterpolator(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTemporalShiftScale(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTemporalSnapToTimeStep(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTransformToGrid(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkWeightedTransformFilter(PyObject *dict); }

static PyMethodDef PyvtkFiltersHybrid_Methods[] = {
  { nullptr, nullptr, 0, nullptr }
};

static PyModuleDef PyvtkFiltersHybrid_Module = {
  PyModuleDef_HEAD_INIT,
  "vtkFiltersHybrid", // m_name
  nullptr, // m_doc
  0, // m_size
  PyvtkFiltersHybrid_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};

PyObject *PyInit_vtkFiltersHybrid()
{
  PyObject *m = PyModule_Create(&PyvtkFiltersHybrid_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module vtkFiltersHybrid");
  }

  const char *depends[5] = {
    "vtkmodules.vtkCommonCore",
    "vtkmodules.vtkCommonDataModel",
    "vtkmodules.vtkCommonExecutionModel",
    "vtkmodules.vtkCommonTransforms",
    "vtkmodules.vtkFiltersGeometry",
  };

  for (int i = 0; i < 5; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      Py_DECREF(m);
      return PyErr_Format(PyExc_ImportError,
        "Failed to load vtkFiltersHybrid: No module named %s",
        depends[i]);
    }
  }

  if (!vtkPythonUtil::IsInitialized())
  {
    Py_DECREF(m);
    return PyErr_Format(PyExc_ImportError,
      "Initialization failed for vtkFiltersHybrid, not compatible with %s",
      depends[0]);
  }

  PyVTKAddFile_vtkAdaptiveDataSetSurfaceFilter(d);
  PyVTKAddFile_vtkBSplineTransform(d);
  PyVTKAddFile_vtkDepthSortPolyData(d);
  PyVTKAddFile_vtkDSPFilterDefinition(d);
  PyVTKAddFile_vtkDSPFilterGroup(d);
  PyVTKAddFile_vtkEarthSource(d);
  PyVTKAddFile_vtkFacetReader(d);
  PyVTKAddFile_vtkForceTime(d);
  PyVTKAddFile_vtkGenerateTimeSteps(d);
  PyVTKAddFile_vtkGreedyTerrainDecimation(d);
  PyVTKAddFile_vtkGridTransform(d);
  PyVTKAddFile_vtkImageToPolyDataFilter(d);
  PyVTKAddFile_vtkImplicitModeller(d);
  PyVTKAddFile_vtkPCAAnalysisFilter(d);
  PyVTKAddFile_vtkPolyDataSilhouette(d);
  PyVTKAddFile_vtkProcrustesAlignmentFilter(d);
  PyVTKAddFile_vtkProjectedTerrainPath(d);
  PyVTKAddFile_vtkRenderLargeImage(d);
  PyVTKAddFile_vtkTemporalArrayOperatorFilter(d);
  PyVTKAddFile_vtkTemporalDataSetCache(d);
  PyVTKAddFile_vtkTemporalFractal(d);
  PyVTKAddFile_vtkTemporalInterpolator(d);
  PyVTKAddFile_vtkTemporalShiftScale(d);
  PyVTKAddFile_vtkTemporalSnapToTimeStep(d);
  PyVTKAddFile_vtkTransformToGrid(d);
  PyVTKAddFile_vtkWeightedTransformFilter(d);

  vtkPythonUtil::AddModule("vtkFiltersHybrid");

  return m;
}
