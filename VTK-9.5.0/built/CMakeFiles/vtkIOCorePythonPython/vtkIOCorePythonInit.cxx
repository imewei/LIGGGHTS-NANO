// Generated by vtkWrapPythonInit (see Wrapping/Tools/vtkWrapPythonInit.c)

#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>

// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

// Export the module initialization function
extern "C" { VTK_ABI_EXPORT PyObject *PyInit_vtkIOCore(); }

// Each PyVTKAddFile_<name>() is implemented in <name>Python.cxx,
// where <name>Python.cxx is generated by running the vtkWrapPython
// executable on the <name>.h header file.
extern "C" { void PyVTKAddFile_vtkUpdateCellsV8toV9(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkAbstractParticleWriter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkAbstractPolyDataReader(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkArrayDataReader(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkArrayDataWriter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkArrayReader(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkArrayWriter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkASCIITextCodec(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkBase64InputStream(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkBase64OutputStream(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkBase64Utilities(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkDataCompressor(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkDelimitedTextWriter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkFileResourceStream(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkGlobFileNames(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkInputStream(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkJavaScriptDataWriter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLZ4DataCompressor(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkLZMADataCompressor(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMemoryResourceStream(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkOutputStream(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkResourceParser(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkResourceStream(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkSortFileNames(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTextCodec(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTextCodecFactory(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkURI(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkURILoader(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUTF16TextCodec(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkUTF8TextCodec(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkWriter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkZLibDataCompressor(PyObject *dict); }

static PyMethodDef PyvtkIOCore_Methods[] = {
  { nullptr, nullptr, 0, nullptr }
};

static PyModuleDef PyvtkIOCore_Module = {
  PyModuleDef_HEAD_INIT,
  "vtkIOCore", // m_name
  nullptr, // m_doc
  0, // m_size
  PyvtkIOCore_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};

PyObject *PyInit_vtkIOCore()
{
  PyObject *m = PyModule_Create(&PyvtkIOCore_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module vtkIOCore");
  }

  const char *depends[2] = {
    "vtkmodules.vtkCommonCore",
    "vtkmodules.vtkCommonExecutionModel",
  };

  for (int i = 0; i < 2; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      Py_DECREF(m);
      return PyErr_Format(PyExc_ImportError,
        "Failed to load vtkIOCore: No module named %s",
        depends[i]);
    }
  }

  if (!vtkPythonUtil::IsInitialized())
  {
    Py_DECREF(m);
    return PyErr_Format(PyExc_ImportError,
      "Initialization failed for vtkIOCore, not compatible with %s",
      depends[0]);
  }

  PyVTKAddFile_vtkUpdateCellsV8toV9(d);
  PyVTKAddFile_vtkAbstractParticleWriter(d);
  PyVTKAddFile_vtkAbstractPolyDataReader(d);
  PyVTKAddFile_vtkArrayDataReader(d);
  PyVTKAddFile_vtkArrayDataWriter(d);
  PyVTKAddFile_vtkArrayReader(d);
  PyVTKAddFile_vtkArrayWriter(d);
  PyVTKAddFile_vtkASCIITextCodec(d);
  PyVTKAddFile_vtkBase64InputStream(d);
  PyVTKAddFile_vtkBase64OutputStream(d);
  PyVTKAddFile_vtkBase64Utilities(d);
  PyVTKAddFile_vtkDataCompressor(d);
  PyVTKAddFile_vtkDelimitedTextWriter(d);
  PyVTKAddFile_vtkFileResourceStream(d);
  PyVTKAddFile_vtkGlobFileNames(d);
  PyVTKAddFile_vtkInputStream(d);
  PyVTKAddFile_vtkJavaScriptDataWriter(d);
  PyVTKAddFile_vtkLZ4DataCompressor(d);
  PyVTKAddFile_vtkLZMADataCompressor(d);
  PyVTKAddFile_vtkMemoryResourceStream(d);
  PyVTKAddFile_vtkOutputStream(d);
  PyVTKAddFile_vtkResourceParser(d);
  PyVTKAddFile_vtkResourceStream(d);
  PyVTKAddFile_vtkSortFileNames(d);
  PyVTKAddFile_vtkTextCodec(d);
  PyVTKAddFile_vtkTextCodecFactory(d);
  PyVTKAddFile_vtkURI(d);
  PyVTKAddFile_vtkURILoader(d);
  PyVTKAddFile_vtkUTF16TextCodec(d);
  PyVTKAddFile_vtkUTF8TextCodec(d);
  PyVTKAddFile_vtkWriter(d);
  PyVTKAddFile_vtkZLibDataCompressor(d);

  vtkPythonUtil::AddModule("vtkIOCore");

  return m;
}
